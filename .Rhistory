x <-  ## Incomplete expression
a
x <- c(0.5, 0.6)       ## numeric
x <- c(TRUE, FALSE)    ## logical
x <- c(T, F)           ## logical
x <- c("a", "b", "c")  ## character
x <- 9:29              ## integer
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
d <- data.frame(x = 1:2, y = 1:10, fac = fac)
d
d <- data.frame(x = 1:3, y = 1:10, fac = fac)
# when a label is made by two words, we use (double) quotes to delimit the label:
x <- list("Los Angeles" = 1, Boston = 2, London = 3)
x <- list('Los Angeles' = 1, Boston = 2, London = 3)
setwd("~/work/Didattica")
## READ TABLE
Tmean <- read.table("XY_Tmean.csv")
## READ TABLE
Tmean <- read.table("XY_Tmean.csv",sep=",")
Tmean
Tmean <- read.table("XY_Tmean.csv",sep=",",header = TRUE)
summary(Tmean)
head(Tmean)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
#
x
sapply(x, quantile)
Tmean
sapply(Tmean, mean)
sapply(Tmean, min)
sapply(Tmean, mac)
sapply(Tmean, max)
sapply(Tmean, quantile)
sapply(Tmean, mode)
sapply(Tmean, median)
4.531425e+06
4.899720e+05
# apply a condition to a variable, e.g. clay content above a specified threshold:
library(readr)
Profile2 <- read_table2("Profile2.txt")
View(Profile2)
clay = Profile2$clay
clay > 25
clay
clay[17]
clay[17]>25
dim(clay)
summary(clay)
length(clay)
length(Profile2)
Profile2
class(Profile2)
Profile2 <- read_table2("Profile2.txt")
View(Profile2)
# what about a selected soil profile?
Profile2$SOIL_PROFILE == '052P6'
Profile2[6,]
scatter(Profile2$X_Coord,Profile2$Y_Coord)
plot(Profile2$X_Coord,Profile2$Y_Coord,type=p)
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p')
plot(Profile2$X_Coord,Profile2$Y_Coord)
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p')
plot(Profile2$X_Coord,Profile2$Y_Coord)
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p')
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p',lwd=2)
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p',lwd=2,color='red')
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p',lwd=2,col='red')
?points
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p',lwd=2,col='red',pch=19)
# subsetting
Profile2[1,1]
Profile2[ ,1] # column
Profile2[1, ] # row
Profile2[1:2,1:5] # range
Profile2[1:10,1:4] # range
Profile2[3:6,1:4] # range
Profile2[c(1,3,5,10),1:4] # list
## NA values
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
bad
print(bad)
clay[7] <- NA
clay
clay = Profile2$clay
my_na = clay[7]
my_na
clay[7] <- NA
mean(clay)
mean(clay,na.rm=TRUE)
clay = Profile2$clay
# let remove a value using NA and then interpolate the missing value:
mean(clay)
my_na
max(clay)
clay==54.86923
which(clay==54.86923)
which(clay>54.8)
# let remove a value using NA and then interpolate the missing value:
mean(clay)
my_na = clay[82]
clay[7] <- NA
mean(clay)
mean(clay,na.rm=TRUE)
# let remove a value using NA and then interpolate the missing value:
clay = Profile2$clay
mean(clay)
my_na = clay[82]
clay[82] <- NA
mean(clay)
mean(clay,na.rm=TRUE)
# interpolate the missing value, by means of the average value od clay in that study area:
clay[82] <- mean(clay,na.rm=TRUE)
clay[82]
my_na
plot(Profile2$X_Coord,Profile2$Y_Coord,type='p',lwd=2,col='red',pch=25)
??pch
?pch
x <- 1
a = 1
1 -> b
print( x )
x
rm(x)
x
x <- 1
x
msg <- 'hello'
msg2 = "hello"
x <-  ## Incomplete expression
x <- 5  ## nothing printed
x <-  ## Incomplete expression
x <- 5  ## nothing printed
rm(x)
x <-  ## Incomplete expression
x <- 5  ## nothing printed
x <-
## Incomplete expression
x <- 5  ## nothing printed
x <-
23
rm( msg, msg2 )
x <- 11:30
x
soil_class = 'udic mollisol'
Tair = 20.34
Tair < 20
x[7]
x <- c(TRUE, FALSE)    ## logical
soil_profiles = c("P1", "P2", "P5")
soil_profiles[ 2 ]
## the vector function
x <- vector("numeric", length = 10)
x
## Mixing objects
y <- c(1.7, "A")   ## character
## Explicit coercion:
x <- 0:6
x
class(x)
# [1] "integer"
as.numeric(x)
x1 = as.numeric(x)
as.logical(x)
# [1] 0 1 2 3 4 5 6
as.logical(x)
XY_Tmean <- read.csv("~/work/Didattica/XY_Tmean.csv")
View(XY_Tmean)
## READ TABLE
Tmean <- read.table("XY_Tmean.csv")
Tmean <- read.table("XY_Tmean.csv",sep=",")
Tmean <- read.table("XY_Tmean.csv",sep=",",header = TRUE)
View(Tmean)
Tmean <- read.table("XY_Tmean.csv",sep=",")
View(Tmean)
Tmean <- read.table("XY_Tmean.csv",sep=",",header = TRUE)
View(Tmean)
getwd()
dir()
?mean()
x
mean(x)
a=x
rm(x)
mean( a )
mean( x = a )
mean( 1:10 )
mean( c(2,4,6) )
mean( x=c(2,4,6) )
x <- 1
print(x)
x
msg <- 'hello'
msg2 = "hello"
x <-  ## Incomplete expression
x <- 5  ## nothing printed
x <-
2
x <- 5
x <- 11:30
x
# subsetting:
x[1]
x[3]
## how to create vectors
x <- c(0.5, 0.6)       ## numeric
x = seq(1,2,0.1)
x
x = seq(from=1,to=2,by=0.1)
x = seq(from=1,by=0.1,to=2)
x = seq( from=1 , by=0.1 , to=2 )
x
x=c(1,2,3,5)
x
x=c(1:80,90)
x
x = 0.1:0.5
x = 0.1:2.5
x <- c(TRUE, FALSE)    ## logical
x
x <- 9:29              ## integer
x
x <- 9:29              ## integer
x
x<16
x<=16
## the vector function
x <- vector("numeric", length = 10)
y <- vector("numeric", 10)
z <- vector(10,"numeric")
t <- vector(length=10,mode="numeric")
b=c(0,1,0,1,0,0,1,1,1,1)
b
as.logical(b)
## Matrices
m <- matrix(nrow = 2, ncol = 3)
m
## READ TABLE
Tmean <- read.table("XY_Tmean.csv")
Tmean <- read.table("XY_Tmean.csv",sep=",")
Tmean <- read.table("XY_Tmean.csv",sep=",",header = TRUE)
View(Tmean)
View(Tmean)
class ( Tmean )
Tmean[1,1]
Tmean[1,3]
Tmean$Tmean[1]
Tmean[1:493,3]
mean( Tmean[1:493,3] )
mean( Tmean[ ,3] )
mean( Tmean$Tmean )
head(Tmean)
summary(Tmean)
Profile2 <- read.delim("~/work/Didattica/Profile2.txt", header=FALSE)
View(Profile2)
Profile2 <- read.delim("~/work/Didattica/Profile2.txt", header=TRUE)
View(Profile2)
summary(Profile2)
