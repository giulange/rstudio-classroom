# Geospatial Data

## LINKS
how UTM Projection works: https://gisgeography.com/utm-universal-transverse-mercator-projection/ <br>
introduction to CRS and UTM : https://www.youtube.com/watch?v=HnWNhyxyUHg <br>
spatial data in R : https://edzer.github.io/UseR2017/ <br>

## Packages used
 - sp, sf for vector geospatial data
 - raster, terra for raster geospatial data

## Non-geographic data
Load the built in dataset called cars. R packages are often shipped with datasets to facilitate the exploitation of documentation.
```{r}
data(cars)
```

It is possible to get R documentation of datasets as long as of functions:
```{r}
?datasets::cars
```

Don't miss the opportunity to explore the content of the table \@ref(tab:tab-cars).
```{r tab-cars, tidy=FALSE, echo=FALSE}
knitr::kable(
  head(cars, 10),
  caption = 'Here is a preview of the cars data frame',
  booktabs = TRUE
)
```

Anytime a new R object is created in the enviroment, it is advisable to explore its content. First step, get the class of the cars dataset:
```{r}
class(cars)
```

Let's give a look to the object size...
```{r}
dim(cars)
```

...to the variables included in the cars data frame...
```{r}
names(cars)
```

...and to their statistics:
```{r}
summary(cars)
```

See Figure \@ref(fig:cars-df).

```{r cars-df, fig.cap='This is a figure created using the examples provided in documentation.', out.width='80%', fig.asp=.75, fig.align='center', echo=1:5}
require(stats)
require(graphics)
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)", las = 1)
lines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = "red")
title(main = "cars data")
#plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
#      las = 1, log = "xy")
# title(main = "cars data (logarithmic scales)")
# lines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = "red")
# summary(fm1 <- lm(log(dist) ~ log(speed), data = cars))
# opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0),
#             mar = c(4.1, 4.1, 2.1, 1.1))
# plot(fm1)
# par(opar)
# 
# ## An example of polynomial regression
# plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
#     las = 1, xlim = c(0, 25))
# d <- seq(0, 25, length.out = 200)
# for(degree in 1:4) {
#   fm <- lm(dist ~ poly(speed, degree), data = cars)
#   assign(paste("cars", degree, sep = "."), fm)
#   lines(d, predict(fm, data.frame(speed = d)), col = degree)
# }
# anova(cars.1, cars.2, cars.3, cars.4)
```


It is possible to get detailed information also on the class and data types for variables included in data frames. Indeed, compare the result for the data frame object _cars_
```{r}
class(cars)
typeof(cars)
```

...for the _dist_ variable:
```{r}
class(cars$dist)
typeof(cars$dist)
```
...and for the _speed_ variable::
```{r}
class(cars$speed)
typeof(cars$speed)
```

The same result can be obtained extracting the variable of interest first:
```{r}
s = cars$speed
class(s)
typeof(s)
head(s)
```

The cars dataset offers a simple example of non-geographic information. Now let's start the study of geographic or geospatial data.

According to the lecture on GIS & Cartography, which characteristics and variables do you expect to manage a geospatial data?


## Spatial data have spatial reference
 - coordinate values (e.g. XY, XYZ)
 - a system of reference for these coordinates (e.g. WGS84)

All spatial data consist of <b>positional information</b>, answering the question <i>‘where is it?’</i>.<br>
In many applications these will be extended by <b>attributes</b>, answering the question <i>‘what is where?’</i>

## Spatial data models
<ul>
    <p style="text-decoration:underline;"><font size=4 color="magenta">Vector data models</font></p>
    <li><b>Point</b>: a single point location, such as a GPS reading or a geocoded address</li>
    <li><b>Line</b>: a set of ordered points, connected by straight line segments</li>
    <li><b>Polygon</b>: an area, marked by one or more enclosing lines, possibly containing holes, with no lines intersecting</li>
    <p style="text-decoration:underline;"><font size=4 color="magenta">Raster data model</font></p>
    <li><b>Grid</b>: a collection of points or rectangular cells, organised in a regular lattice</li>
</ul>

### Vector vs Raster data models
I have to put here all the information available at `/home/giuliano/artwork/raster_vs_vector/`.


