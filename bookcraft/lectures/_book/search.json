[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"sample handbook written Markdown.\ncan find topics covered teacher lessons appropriate insights.","code":""},{"path":"index.html","id":"geografia-e-valutazione-del-suolo-gevs","chapter":"About","heading":"0.1 Geografia e Valutazione del Suolo (GeVS)","text":"section dedicated course Geografia e Valutazione del Suolo (U3265) master’s degree SCIENZE FORESTALI ED AMBIENTALI (N08).Course information available teacher’s web page.","code":""},{"path":"index.html","id":"obiettivi-formativi","chapter":"About","heading":"0.1.1 Obiettivi formativi","text":"course aims providing students advanced notions related soil key properties, analysis spatial variability environmental information particular emphasis soil properties characteristics, also means data manipulation build models spatial interpolation., provided students notions related data retrieval (e.g. database internet), geospatial data visualization analysis, land evaluation.","code":""},{"path":"index.html","id":"risultati-di-apprendimenti-attesi","chapter":"About","heading":"0.1.2 Risultati di apprendimenti attesi","text":"course provides students knowledge : spatial (temporal) variability; pedometrics quantitative approaches soil (environmental) spatial variabilityThe course delivers ability tools needed apply knowledge retrieving fusing data coming different collection observations armonization; producing high resolution data means low-cost, auxiliary environmental covariates; analysing modelling geospatial variability key crop/forestry features; digital mapping variables belonging weather, soil, crop forestry conditions; land evaluation techniques; aggregation available information.addition, student must able evaluate (soil) spatial variability impact decision making, state conditions spatial variability also using precision approaches (4.0 agriculture), data elaboration mapping open-source software (QGIS, RStudio)","code":""},{"path":"index.html","id":"materiale-didattico","chapter":"About","heading":"0.1.3 Materiale didattico","text":"“Guida Pratica di Pedologia” di Curtaz et al. Agronomia-NAPEA_Manuale_pedologia.pdf [Parte , B e C]“Metodi di valutazione dei suoli e delle terre”. MIPAF. Collana di metodi analitici per l’agricoltura. CRA – Istituto Sperimentale per lo Studio e la Difesa del Suolo. Firenze [ PDF ] – Capitoli: 1, 2, 3, 4, 5, 12, 29, 40, appendice“Basi di Pedologia” [ WEB ] – Capitoli: 1, 2, 3, 5, [6], 9“framework land evaluation”, FAO, [ WEB ]“R Programming Data Science” Roger D. Peng [ WEB ] – Capitoli: 1, 2, 3, 4, 5, 6, 9, 10, 11“Geocomputation R” Lovelace, Nowosad Muenchow [ WEB ] – Capitoli: 1, 2, 3, 6, 7, [8]R Cheat Sheets [ WEB ]Lecture notes provided teacher course","code":""},{"path":"index.html","id":"modalità-di-svolgimento-dellinsegnamento","chapter":"About","heading":"0.1.4 Modalità di svolgimento dell’insegnamento","text":"","code":""},{"path":"index.html","id":"mode","chapter":"About","heading":"0.1.4.1 Mode","text":"Lectures (see syllabus)Hands-sessionsTeacher use ) lectures per approx. 55% total hours, b) practical exercises computer (mainly RStudio) elaborate applied knowledge approx. 40% total hours, c) seminars approx. 5% total hours.Teacher organize students field excursion refine study soils geographical territorial emphasis.teacher discretion, data collected field excursion might used written exam.","code":""},{"path":"index.html","id":"hands-on-sessions","chapter":"About","heading":"0.1.4.2 Hands-on sessions","text":"recommended use personal computer.Teacher assigns homework facilitate acquisition technical practical skills.Teacher provides access RStudio Server instance can used student course means web browser.Student can install RStudio laptop, teacher advises use server instance provided (es. avoid compatibility issues R libraries).","code":""},{"path":"index.html","id":"verifica-di-apprendimento","chapter":"About","heading":"0.1.5 Verifica di apprendimento","text":"written exam take place end course performance binding access oral exam.final mark computed giving following relative weights: 60% written exam 40% oral exam.","code":""},{"path":"index.html","id":"digital-mapping-geospatial-statistics-decision-support","chapter":"About","heading":"0.2 Digital Mapping, Geospatial Statistics & Decision Support","text":"section dedicated course Digital Mapping, Geospatial Statistics & Decision Support (U2584) master’s degree PRECISION LIVESTOCK FARMING (P36).Course information available teacher’s web page.","code":""},{"path":"index.html","id":"prerequisiti","chapter":"About","heading":"0.2.1 Prerequisiti","text":"Basic notions related statistics (position dispersion indicators)Computer science basics (software installation, spreadsheet software)Install open QGIS (use GIS software optional)Install open RStudio (optional, teacher shares RStudio Server instance)","code":""},{"path":"index.html","id":"obiettivi-formativi-1","chapter":"About","heading":"0.2.2 Obiettivi Formativi","text":"course aims providing students advanced notions related soil key properties, analysis spatial variability environmental information particular emphasis soil properties characteristics, also means data manipulation build models spatial interpolation., provided students notions related data retrieval, geospatial visualization analysis.","code":""},{"path":"index.html","id":"risultati-di-apprendimenti-attesi-1","chapter":"About","heading":"0.2.3 Risultati di apprendimenti attesi","text":"","code":""},{"path":"index.html","id":"conoscenza-e-capacità-di-comprensione","chapter":"About","heading":"0.2.3.1 Conoscenza e capacità di comprensione","text":"course provides students knowledge : key soil physical chemical characteristics; pedology, soil classification spatial variability; pedometrics quantitative approaches soil spatial variability; land evaluation livestock farm management; spatial (temporal) variability production process; decision support.","code":""},{"path":"index.html","id":"capacità-di-applicare-conoscenza-e-comprensione","chapter":"About","heading":"0.2.3.2 Capacità di applicare conoscenza e comprensione","text":"course delivers ability tools needed apply knowledge retrieving fusing data coming different collection observations; producing high resolution data means low-cost, auxiliary environmental covariates; analysing modelling geospatial variability key crop/livestock features; digital mapping variables belonging weather, soil, crop livestock conditions; land evaluation techniques; aggregation available information support management decisions.addition, student must able evaluate (soil) spatial variability impact farm management, farm state conditions variability impact management process also using precision approaches, data elaboration mapping open-source software (QGIS, RStudio)","code":""},{"path":"index.html","id":"materiale-didattico-1","chapter":"About","heading":"0.2.4 Materiale didattico","text":"“Principles Practice Soil Science: Soil Natural Resource” White, 4th Edition, LINK, ISBN: 978-0-632-06455-7. Chapters: 2, 3, 4, 14“Soils: Basic Concepts Future Challenges” Certini & Scalenghe, LINK, ISBN: 9780511535802. Chapters: 8.“Geocomputation R” Lovelace, Nowosad Muenchow (https://r.geocompx.org)“R Programming Data Science” Roger D. Peng [ https://bookdown.org/rdpeng/rprogdatascience/ ] – Chapters: 1, 2, 3, 4, 5, 6, 9, 10, 11“framework land evaluation”, FAO, (http://www.fao.org/3/x5310e/x5310e00.htm)Lecture notes provided teacher course","code":""},{"path":"index.html","id":"modalità-di-svolgimento-dellinsegnamento-1","chapter":"About","heading":"0.2.5 Modalità di svolgimento dell’insegnamento","text":"Teacher use ) lectures per approx. 45% total hours, b) practical exercises computer (mainly RStudio) elaborate applied knowledge approx. 40% total hours, c) seminars approx. 15% total hours.Teacher organize students field excursion refine study soils geographical territorial emphasis.teacher discretion, data collected field excursion might used written exam.","code":""},{"path":"index.html","id":"verifica-di-apprendimento-1","chapter":"About","heading":"0.2.6 Verifica di apprendimento","text":"written exam take place end course performance binding access oral exam.final mark computed giving following relative weights: 60% written exam 40% oral exam.","code":""},{"path":"index.html","id":"general-notes-about-the-courses","chapter":"About","heading":"0.3 General notes about the courses","text":"two courses made combining frontal integrative teaching.\nHands-sessions R / RStudio fostered enhance comprehension technicalities topics.","code":""},{"path":"geospatial-data.html","id":"geospatial-data","chapter":"1 Geospatial Data","heading":"1 Geospatial Data","text":"","code":""},{"path":"geospatial-data.html","id":"links","chapter":"1 Geospatial Data","heading":"1.1 LINKS","text":"UTM Projection works: https://gisgeography.com/utm-universal-transverse-mercator-projection/ \nintroduction CRS UTM : https://www.youtube.com/watch?v=HnWNhyxyUHg \nspatial data R : https://edzer.github.io/UseR2017/ ","code":""},{"path":"geospatial-data.html","id":"packages-used","chapter":"1 Geospatial Data","heading":"1.2 Packages used","text":"sp, sf vector geospatial dataraster, terra raster geospatial data","code":""},{"path":"geospatial-data.html","id":"non-geographic-data","chapter":"1 Geospatial Data","heading":"1.3 Non-geographic data","text":"Load built dataset called cars. R packages often shipped datasets facilitate exploitation documentation.possible get R documentation datasets long functions:Don’t miss opportunity explore content table 1.1.Table 1.1: preview cars data frameAnytime new R object created enviroment, advisable explore content. First step, get class cars dataset:Let’s give look object size……variables included cars data frame……statistics:See Figure 1.1.\nFigure 1.1: figure created using examples provided documentation.\npossible get detailed information also class data types variables included data frames. Indeed, compare result data frame object cars…dist variable:…speed variable::result can obtained extracting variable interest first:cars dataset offers simple example non-geographic information. Now let’s start study geographic geospatial data.According lecture GIS & Cartography, characteristics variables expect manage geospatial data?","code":"\ndata(cars)\n?datasets::cars\nclass(cars)\n#> [1] \"data.frame\"\ndim(cars)\n#> [1] 50  2\nnames(cars)\n#> [1] \"speed\" \"dist\"\nsummary(cars)\n#>      speed           dist       \n#>  Min.   : 4.0   Min.   :  2.00  \n#>  1st Qu.:12.0   1st Qu.: 26.00  \n#>  Median :15.0   Median : 36.00  \n#>  Mean   :15.4   Mean   : 42.98  \n#>  3rd Qu.:19.0   3rd Qu.: 56.00  \n#>  Max.   :25.0   Max.   :120.00\nrequire(stats)\nrequire(graphics)\nplot(cars, xlab = \"Speed (mph)\", ylab = \"Stopping distance (ft)\", las = 1)\nlines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = \"red\")\ntitle(main = \"cars data\")\nclass(cars)\n#> [1] \"data.frame\"\ntypeof(cars)\n#> [1] \"list\"\nclass(cars$dist)\n#> [1] \"numeric\"\ntypeof(cars$dist)\n#> [1] \"double\"\nclass(cars$speed)\n#> [1] \"numeric\"\ntypeof(cars$speed)\n#> [1] \"double\"\ns = cars$speed\nclass(s)\n#> [1] \"numeric\"\ntypeof(s)\n#> [1] \"double\"\nhead(s)\n#> [1] 4 4 7 7 8 9"},{"path":"geospatial-data.html","id":"spatial-data-have-spatial-reference","chapter":"1 Geospatial Data","heading":"1.4 Spatial data have spatial reference","text":"coordinate values (e.g. XY, XYZ)system reference coordinates (e.g. WGS84)spatial data consist positional information, answering question ‘?’.\nmany applications extended attributes, answering question ‘?’","code":""},{"path":"geospatial-data.html","id":"spatial-data-models","chapter":"1 Geospatial Data","heading":"1.5 Spatial data models","text":"\nVector data models\n\nPoint: single point location, GPS reading geocoded address\n\nLine: set ordered points, connected straight line segments\n\nPolygon: area, marked one enclosing lines, possibly containing holes, lines intersecting\n\nRaster data model\n\nGrid: collection points rectangular cells, organised regular lattice\n","code":""},{"path":"geospatial-data.html","id":"vector-vs-raster-data-models","chapter":"1 Geospatial Data","heading":"1.5.1 Vector vs Raster data models","text":"put information available /home/giuliano/artwork/raster_vs_vector/.","code":""},{"path":"vector-data-model.html","id":"vector-data-model","chapter":"2 Vector Data Model","heading":"2 Vector Data Model","text":"","code":""},{"path":"vector-data-model.html","id":"links-1","chapter":"2 Vector Data Model","heading":"2.1 LINKS","text":"sf package : https://cran.r-project.org/web/packages/sf/sf.pdf \nsp package : …","code":""},{"path":"vector-data-model.html","id":"packages-used-1","chapter":"2 Vector Data Model","heading":"2.2 Packages used","text":"","code":""},{"path":"vector-data-model.html","id":"install-libraries","chapter":"2 Vector Data Model","heading":"2.2.1 Install libraries","text":"following commands can skipped RStudio instance provided teacher course.Note: installation geojsonio can sometimes tricky.","code":""},{"path":"vector-data-model.html","id":"load-libraries","chapter":"2 Vector Data Model","heading":"2.2.2 Load libraries","text":"","code":"\nlibrary(sf)          # classes and functions for vector data\n#> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2()\n#> is TRUE\nlibrary(raster)      # classes and functions for raster data\n#> Loading required package: sp\nlibrary(spData)      # load geographic data\nlibrary(spDataLarge) # load larger geographic data\nrequire(osmdata)     # Open Street Map\n#> Loading required package: osmdata\n#> Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n#library(geojsonio)\n#library(repr)"},{"path":"vector-data-model.html","id":"an-introduction-to-simple-features","chapter":"2 Vector Data Model","heading":"2.3 An introduction to simple features","text":"Simple features open standard developed endorsed Open Geospatial Consortium (OGC), --profit organization.\nSimple Features (SF) hierarchical data model represents wide range geometry types.\n17 geometry types supported specification, 7 used vast majority geographic research (see Figure ); core geometry types fully supported R package sf.Geometries basic building blocks simple features.\nSimple features R can take one 17 geometry types supported sf package.\nfocus seven commonly used types: POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION.Find whole list possible feature types PostGIS manual.basis geometry type point.\nPOINT (5 2)\n\nLINESTRING (1 5, 4 4, 4 1, 2 2, 3 2)\n\nPOLYGON ((1 5, 2 2, 4 1, 4 4, 1 5))\n\nMULTIPOINT (5 2, 1 3, 3 4, 3 2)\n\nMULTILINESTRING ((1 5, 4 4, 4 1, 2 2, 3 2), (1 2, 2 4))\n\nMULTIPOLYGON (((1 5, 2 2, 4 1, 4 4, 1 5), (0 2, 1 2, 1 3, 0 3, 0 2)))\n\nGEOMETRYCOLLECTION (MULTIPOINT (5 2, 1 3, 3 4, 3 2), LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2))\n","code":""},{"path":"vector-data-model.html","id":"why-simple-features","chapter":"2 Vector Data Model","heading":"2.3.1 Why simple features?","text":"widely supported data model underlies data structures many GIS applications including QGIS PostGIS.\nmajor advantage using data model ensures work cross-transferable set-ups, example importing exporting spatial databases.","code":"\nvignette(package = \"sf\") # see which vignettes are available\nvignette(\"sf1\")          # an introduction to the package"},{"path":"vector-data-model.html","id":"simple-feature-geometry-sfg","chapter":"2 Vector Data Model","heading":"2.4 Simple feature geometry (sfg)","text":"\nnumeric vector: single point\n\nmatrix: set points, row represents point, multipoint linestring\n\nlist: collection objects matrices, multilinestrings geometry collections\n(make examples vector, matrix list points)","code":""},{"path":"vector-data-model.html","id":"point","chapter":"2 Vector Data Model","heading":"2.4.1 POINT","text":"Create POINT geometry plot :","code":"\npt = st_point( c(5,2) )\nclass(pt)\n#> [1] \"XY\"    \"POINT\" \"sfg\"\npt\n#> POINT (5 2)\nplot(pt,col=\"red\",pch=16, cex=2)\naxis(1,labels=T)\naxis(2,labels=T)"},{"path":"vector-data-model.html","id":"linestring","chapter":"2 Vector Data Model","heading":"2.4.2 LINESTRING","text":"Create matrix 3 points connected straight lines:Create LINESTRING plot :","code":"\nlinestring_matrix = rbind( c(5,2) , c(4,6), c(2,4) )\nclass( linestring_matrix )\n#> [1] \"matrix\" \"array\"\nln = st_linestring( linestring_matrix )\nclass(ln)\n#> [1] \"XY\"         \"LINESTRING\" \"sfg\"\nplot(ln,col=\"green\", lwd=5)\naxis(1,labels=T)\naxis(2,labels=T)"},{"path":"vector-data-model.html","id":"polygon","chapter":"2 Vector Data Model","heading":"2.4.3 POLYGON","text":"Create list 4 points, first last points :Create POLYGON three points (since first laste identical…):","code":"\npolygon_list = list(rbind( c(2,4), c(4,6), c(5,2) , c(2,4) ))\nclass( polygon_list )\n#> [1] \"list\"\npg = st_polygon( polygon_list )\nclass(pg)\n#> [1] \"XY\"      \"POLYGON\" \"sfg\"\nplot(pg,col=\"yellow\",lwd=5)\naxis(1,labels=T)\naxis(2,labels=T)"},{"path":"vector-data-model.html","id":"multipoint","chapter":"2 Vector Data Model","heading":"2.4.4 MULTIPOINT","text":"Create matrix 3 points:Create MULTIPOINT geometry plot (set points belongs record / observation):","code":"\nmultipoint_matrix = rbind( c(5,2) , c(4,6), c(2,4) )\nclass( multipoint_matrix )\n#> [1] \"matrix\" \"array\"\nmp = st_multipoint( multipoint_matrix )\nclass(mp)\n#> [1] \"XY\"         \"MULTIPOINT\" \"sfg\"\nplot(mp,col=\"magenta\", pch=16, cex=2)\naxis(1,labels=T)\naxis(2,labels=T)"},{"path":"vector-data-model.html","id":"multilinestring","chapter":"2 Vector Data Model","heading":"2.4.5 MULTILINESTRING","text":"Create list 10 points:Create MULTILINESTRING geometry plot :","code":"\nmultilinestring_list = list( rbind( c(1, 5), c(2, 2), c(4, 1), c(4, 4) ) , \n                             rbind( c(0, 2), c(1, 2), c(1, 3), c(0, 3) ) \n                           )\nclass(multilinestring_list)\n#> [1] \"list\"\nmln = st_multilinestring( multilinestring_list )\nclass(mln)\n#> [1] \"XY\"              \"MULTILINESTRING\" \"sfg\"\nplot(mln,col=\"blue\",lwd=5)\naxis(1,labels=T)\naxis(2,labels=T)"},{"path":"vector-data-model.html","id":"multipolygon","chapter":"2 Vector Data Model","heading":"2.4.6 MULTIPOLYGON","text":"Create nested list (.e. list list) 10 points (points used MULTILINESTRING ):Create MULTIPOLYGON geometry plot :","code":"\nmultipolygon_list = list(list( rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)) ),\n                         list( rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)) )\n                        )\nclass(multipolygon_list)\n#> [1] \"list\"\nmpg = st_multipolygon( multipolygon_list )\nclass(mpg)\n#> [1] \"XY\"           \"MULTIPOLYGON\" \"sfg\"\nplot(mpg,col=\"gray\",lwd=5)\naxis(1,labels=T)\naxis(2,labels=T)"},{"path":"vector-data-model.html","id":"geometrycollection","chapter":"2 Vector Data Model","heading":"2.4.7 GEOMETRYCOLLECTION","text":"Create two matrices 4 5 points:Create GEOMETRYCOLLECTION geometry fusing MULTIPOINT LINESTRING together:","code":"\nmultipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))\nlinestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 3))\nclass(multipoint_matrix)\n#> [1] \"matrix\" \"array\"\nclass(linestring_matrix)\n#> [1] \"matrix\" \"array\"\ngeometrycollection_list = list(st_multipoint(multipoint_matrix),\n                              st_linestring(linestring_matrix))\ngcoll = st_geometrycollection(geometrycollection_list)\nclass(gcoll)\n#> [1] \"XY\"                 \"GEOMETRYCOLLECTION\"\n#> [3] \"sfg\"\nplot(gcoll,col=\"violet\",pch=16,cex=2,lwd=5)\naxis(1,labels=T)\naxis(2,labels=T)\nst_geometry_type(gcoll)\n#> [1] GEOMETRYCOLLECTION\n#> 18 Levels: GEOMETRY POINT LINESTRING POLYGON ... TRIANGLE"},{"path":"vector-data-model.html","id":"simple-features-column-sfc","chapter":"2 Vector Data Model","heading":"2.5 Simple features column (sfc)","text":"Think requirement soil survey need observe two soil profiles field.\ncollect soil samples topsoil carry laboratory analysis retrieve physical chemical soil properties.\nfirst step select localization two points, means can attach geospatial point two coordinates given GPS device. instance, using simple coordinates sake clarity:can create two POINT geometries follows:can create object collecting geospatial location soil profiles?","code":"\nP1 = st_point(c(5, 2))\nP2 = st_point(c(1, 3))"},{"path":"vector-data-model.html","id":"from-pure-geometry-of-distinct-points-to-a-set-of-organized-records-sfg","chapter":"2 Vector Data Model","heading":"2.5.1 From pure geometry of distinct POINTs to a set of organized records (SFG)","text":"One sfg object contains single simple feature geometry. simple feature geometry column (sfc) can collect sfg objects:Print R console metadata associated SFC object:addition, can see print , sfc can manage also information Coordinate Reference System (CRS) use.\ncommand st_sfc(P1, P1) didn’t set CRS st_sfc() function dedicated argument , e.g. st_sfc(..., crs=4326).Simple Feature Column (SFC) can built collection geometry types.following example, two records representing two forest patches listed together get SFG:\nFigure 2.1: Two forest patches managed using SFC.\nalso possible create SFC object set SFG different geometry types:","code":"\npoints_sfc = st_sfc(P1, P1)\nclass(points_sfc)\n#> [1] \"sfc_POINT\" \"sfc\"\nprint(points_sfc)\n#> Geometry set for 2 features \n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 5 ymin: 2 xmax: 5 ymax: 2\n#> CRS:           NA\n#> POINT (5 2)\n#> POINT (5 2)\n# Forest Patch #1, e.g. Pinus\npolygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))\npolygon1 = st_polygon(polygon_list1)\n# Forest Patch #2, e.g. Quercus\npolygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))\npolygon2 = st_polygon(polygon_list2)\n# SFG\npolygon_sfc = st_sfc(polygon1, polygon2)\nprint(polygon_sfc)\n#> Geometry set for 2 features \n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 0 ymin: 1 xmax: 4 ymax: 5\n#> CRS:           NA\n#> POLYGON ((1 5, 2 2, 4 1, 4 4, 1 5))\n#> POLYGON ((0 2, 1 2, 1 3, 0 3, 0 2))\nplot(polygon_sfc, col=\"gray\", lwd=5, xlim=c(-1,5), ylim=c(0,6))\n# combining objects created above:\nmixed_sfc = st_sfc(P1, mln, polygon1)\n# plot:\nplot(mixed_sfc, pch=16, cex=2, lwd=5)"},{"path":"vector-data-model.html","id":"crs-coordinate-reference-system","chapter":"2 Vector Data Model","heading":"2.5.2 CRS (Coordinate Reference System)","text":"SFC objects can additionally store information coordinate reference systems (CRS).\nspecify certain CRS, can use EPSG (SRID) proj4string attributes sfc object. default value EPSG (SRID) proj4string NA (Available), can verified function st_crs( ):argument crs used set Reference System use coordinates. simple example, assume GCS (Geodetic Coordinate reference System) points \\(P_1\\) \\(P_2\\) geographical coordinates Longitude Latitude (WGS84 datum):detailed reading CRS made:","code":"\nprint(points_sfc)\n#> Geometry set for 2 features \n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 5 ymin: 2 xmax: 5 ymax: 2\n#> CRS:           NA\n#> POINT (5 2)\n#> POINT (5 2)\nst_crs(points_sfc)\n#> Coordinate Reference System: NA\n# EPSG definition\npoints_sfc_wgs = st_sfc(P1, P2, crs = 4326)\nprint(points_sfc_wgs)\n#> Geometry set for 2 features \n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 3\n#> Geodetic CRS:  WGS 84\n#> POINT (5 2)\n#> POINT (1 3)\nst_crs(points_sfc_wgs)\n#> Coordinate Reference System:\n#>   User input: EPSG:4326 \n#>   wkt:\n#> GEOGCRS[\"WGS 84\",\n#>     ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n#>         MEMBER[\"World Geodetic System 1984 (Transit)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G730)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G873)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G1150)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G1674)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G1762)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G2139)\"],\n#>         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n#>             LENGTHUNIT[\"metre\",1]],\n#>         ENSEMBLEACCURACY[2.0]],\n#>     PRIMEM[\"Greenwich\",0,\n#>         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>     CS[ellipsoidal,2],\n#>         AXIS[\"geodetic latitude (Lat)\",north,\n#>             ORDER[1],\n#>             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>         AXIS[\"geodetic longitude (Lon)\",east,\n#>             ORDER[2],\n#>             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>     USAGE[\n#>         SCOPE[\"Horizontal component of 3D system.\"],\n#>         AREA[\"World.\"],\n#>         BBOX[-90,-180,90,180]],\n#>     ID[\"EPSG\",4326]]"},{"path":"vector-data-model.html","id":"the-sf-class","chapter":"2 Vector Data Model","heading":"2.6 The SF class","text":"‘SF Geometry’ object purely geometric ‘SF Column’ object geographic building block.\norder create SF need fulfil following steps:Create two SFG, e.g. POINT geometry (\\(P_1\\) \\(P_2\\)) (add link section).Create SFC, e.g. collect together \\(P_1\\) \\(P_2\\) define CRS (add link section).Create table attributes (variables) means real-world entities can described create Simple Feature (SF) st_sf( ).Real-world entities, soils, measurable characteristics can stored attributes variables.\nthird final building block get SF creation non-geographic attributes.\nLet’s build example scratch:Step 01:Step 02:Step 03:R object information, data metadata, required fully describe Simple Feature defined OGC Standard.vector data model created simple example can managed R also exported managed whatever software capable GIS funcionalities.","code":"\nP1_sfg = st_point(c(5, 2))\nP2_sfg = st_point(c(1, 3))\nprint(P1_sfg)\n#> POINT (5 2)\nP_sfc <- st_sfc(P1_sfg, P2_sfg, crs=4326)\nprint(P_sfc)\n#> Geometry set for 2 features \n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 3\n#> Geodetic CRS:  WGS 84\n#> POINT (5 2)\n#> POINT (1 3)\nattrib <- data.frame( clay = c(25,47), sand = c(30,23), silt = c(45,30) )\nP_sf <- st_sf(attrib,P_sfc)\nprint(P_sf)\n#> Simple feature collection with 2 features and 3 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 1 ymin: 2 xmax: 5 ymax: 3\n#> Geodetic CRS:  WGS 84\n#>   clay sand silt       P_sfc\n#> 1   25   30   45 POINT (5 2)\n#> 2   47   23   30 POINT (1 3)"},{"path":"vector-data-model.html","id":"creation-of-a-simple-feature","chapter":"2 Vector Data Model","heading":"2.6.1 Creation of a Simple Feature","text":"simple feature can created:scratch, using synthetic/real-world datafrom vector data model stored local/remote file","code":""},{"path":"vector-data-model.html","id":"from-scratch-synthetic-data","chapter":"2 Vector Data Model","heading":"2.6.1.1 From scratch | synthetic data","text":"(reference example using P1 P2, otherwise create new example -> forest livestock)","code":""},{"path":"vector-data-model.html","id":"scratch-realworld","chapter":"2 Vector Data Model","heading":"2.6.1.2 From scratch | real-world data","text":"example read data files designed implement vector data model.\ntemperature precipitation measurements carried standard agrometeorological ground stations extracted Excel files (Excel format best interoperable practice):measurements geolocalization tables used reading / import :Table 2.1: preview daily maximum Air Temperatura measurements.Table 2.2: preview daily cumulative Rainfall measurements.Table 2.3: coordinates geodetic reference system WGS84 (EPSG:4326).Extract coordinates, temperature rainfall measurements MODENAURB station 2007-01-01:Create Simple Feature using values extracted :example provided , one record created possible add records (features) belonging stations dates.list variable / attributes / fields (handbook term variable prefered):Print geometry :","code":"\nrequire(readxl)\n#> Loading required package: readxl\nTmax   <- read_excel(\"Tmax.xlsx\", sheet = \"measurements\", na = \"NA\")\nRain   <- read_excel(\"Rainfall.xlsx\", sheet = \"measurements\", na = \"NA\")\nlonlat <- read_excel(\"Tmax.xlsx\", sheet = \"geolocalization\", na = \"NA\")\nname <- lonlat$Station[1]\nt1   <- Tmax$MODENAURB[1]\nr1   <- Rain$MODENAURB[1]\nd1   <- Tmax$DATE[1]\nlon  <- lonlat$Longitude[1]\nlat  <- lonlat$Latitude[1]\nprint( c(name, lon,lat,t1,r1) )\n#> [1] \"MODENAURB\" \"10.91571\"  \"44.65191\"  \"6.5\"      \n#> [5] \"0\"\npoint   = st_point(c(lon, lat))        # 1. sfg object\nclass(point)                           #    see that the class is a sfg\n#> [1] \"XY\"    \"POINT\" \"sfg\"\ngeom    = st_sfc(point, crs = 4326)    # 2. sfc object\nclass(geom)                            #    see that the class is a sfc\n#> [1] \"sfc_POINT\" \"sfc\"\nattrib  = data.frame(                  # 3. attributes\n   name = name,                        #    Station name, \"MODENAURB\"\n   date = as.Date(d1),                 #    Convert the date-time in date, on '2007-01-01'\n   temperature = t1,                   #    Air Temperature for \"MODENAURB\" on '2007-01-01'\n   rainfall = r1                       #    Rainfall for \"MODENAURB\" on '2007-01-01'\n)\n# Simple Feature (Collection):\nSF = st_sf(attrib, geometry = geom)    # 3. sf object\nclass(SF)                              #    see that the class is a sf\n#> [1] \"sf\"         \"data.frame\"\nprint(SF)                              #    see both metadata and data in the simple feature\n#> Simple feature collection with 1 feature and 4 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 10.91571 ymin: 44.65191 xmax: 10.91571 ymax: 44.65191\n#> Geodetic CRS:  WGS 84\n#>        name       date temperature rainfall\n#> 1 MODENAURB 2007-01-01         6.5        0\n#>                    geometry\n#> 1 POINT (10.91571 44.65191)\nnames(SF)\n#> [1] \"name\"        \"date\"        \"temperature\" \"rainfall\"   \n#> [5] \"geometry\"\nprint(SF$geometry)\n#> Geometry set for 1 feature \n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 10.91571 ymin: 44.65191 xmax: 10.91571 ymax: 44.65191\n#> Geodetic CRS:  WGS 84\n#> POINT (10.91571 44.65191)"},{"path":"vector-data-model.html","id":"interchange-format-local-file","chapter":"2 Vector Data Model","heading":"2.6.1.3 Interchange format | local file","text":"Load air temperature measurements carried standard agrometeorological ground stations (IoT context):Table 2.4: preview Air Temperature data frameConvert data frame simple feature (see new field geometry created function st_as_sf()):Table 2.5: preview Air Temperature simple feature","code":"\nsetwd('../datasets/interoperable')\nclass(t_day)\n#> [1] \"data.frame\"\nrequire(sf)\nt_day_sf <- st_as_sf(t_day,coords = c(\"lon\",\"lat\"), crs=4326)"},{"path":"vector-data-model.html","id":"existing-vector-data-model-local-file","chapter":"2 Vector Data Model","heading":"2.6.1.4 Existing Vector Data Model | local file","text":"Import R Improsta Farm Digital Soil Map.\nst_read() function reads vector data model written Shapefile format:Table 2.6: preview Improsta farm digital soil map","code":"\nrequire(sf)\nimp_dsm <- st_read(\"DigitalSoilMap_Improsta.shp\")\n#> Reading layer `DigitalSoilMap_Improsta' from data source \n#>   `/home/giuliano/datasets/vector/DigitalSoilMap_Improsta.shp' \n#>   using driver `ESRI Shapefile'\n#> Simple feature collection with 20 features and 8 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 496825.7 ymin: 4488864 xmax: 498998.6 ymax: 4489958\n#> Projected CRS: WGS 84 / UTM zone 33N\nplot(imp_dsm[\"SIGLA_UC\"], axes=TRUE, border=\"grey\")"},{"path":"vector-data-model.html","id":"existing-vector-data-model-remote-data-source","chapter":"2 Vector Data Model","heading":"2.6.1.5 Existing Vector Data Model | remote data source","text":"getbb() function can search OpenStreetMap using toponym (e.g. Emilia Romagna) can return simple feature output (format_out=sf_polygon):","code":"\nrequire(osmdata)\nER  = osmdata::getbb(\"Emilia Romagna\",format_out=\"sf_polygon\")\nnames(ER)\n#> [1] \"polygon\"      \"multipolygon\"\nER <- ER$multipolygon\nplot(ER$geometry,reset=F)\nplot(SF$geometry,add=T,pch=16,col=\"red\")\naxis(1, labels=TRUE)\naxis(2, labels=TRUE)\ntext(st_coordinates(SF),\"P1\",pos=2)\ntitle(xlab=\"Longitude [degree]\",ylab=\"Latitude [degree]\")"},{"path":"vector-data-model.html","id":"export-of-a-simple-feature","chapter":"2 Vector Data Model","heading":"2.6.2 Export of a Simple Feature","text":"section creating data scratch created simple feature scratch. Let’s export / save / write file using standard vector data model/driver (e.g. geojson format):Note driver used write data HDD depends file extension provided: example , used .geojson extension can used.","code":"\nst_write(SF,\"my_first_simple_feature.geojson\")"},{"path":"geospatial-data-visualization.html","id":"geospatial-data-visualization","chapter":"3 Geospatial Data Visualization","heading":"3 Geospatial Data Visualization","text":"See :: https://r-spatial.github.io/sf/articles/sf5.html","code":""},{"path":"geospatial-data-visualization.html","id":"basic-plot-function","chapter":"3 Geospatial Data Visualization","heading":"3.1 Basic plot function","text":"","code":""},{"path":"geospatial-data-visualization.html","id":"advanced-ggplot2-library","chapter":"3 Geospatial Data Visualization","heading":"3.2 Advanced ggplot2 library","text":"","code":""},{"path":"geospatial-data-visualization.html","id":"advanced-tmaps-library","chapter":"3 Geospatial Data Visualization","heading":"3.3 Advanced tmaps library","text":"Create Air temperature measurements simple feature:variables available?Let’s create map using tmap library:\nNote can create interactive maps using \"view\" mode (document interactive maps don’t work).\nbook GEOG3915 GeoComputation Spatial Analysis practicals created without problems.","code":"#> Loading required package: sf\n#> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2()\n#> is TRUE\n#> Loading required package: readr\nt_day <- read_csv(\"AirTemperature_day.csv\")\n#> Rows: 101 Columns: 8\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (1): Name\n#> dbl (7): lon, lat, elev, mean, min, max, N\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nt_day_sf <- st_as_sf(t_day,coords = c(\"lon\",\"lat\"), crs=4326)\nnames(t_day_sf)\n#> [1] \"Name\"     \"elev\"     \"mean\"     \"min\"      \"max\"     \n#> [6] \"N\"        \"geometry\"\nrequire(tmap)\n#> Loading required package: tmap\n#> Breaking News: tmap 3.x is retiring. Please test v4, e.g. with\n#> remotes::install_github('r-tmap/tmap')\ntmap::tmap_mode(\"plot\")\n#> tmap mode set to plotting\ntm_shape(t_day_sf) + \n  tm_bubbles(size=\"max\",col=\"elev\")"}]
